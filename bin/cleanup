# -*- cperl -*-
eval 'exec $CBROOT/bin/perl $0 ${1+"$@"}'
  unless $running_under_some_shell;
use strict;
use warnings;
use v5.12.0;

use NP::Model;
use DateTime;
use DateTime::Format::MySQL;

my $dbh = NP::Model->dbh;

my ($min_ts) = $dbh->selectrow_array(q[select min(ts) from log_scores]);
$min_ts = DateTime::Format::MySQL->parse_datetime($min_ts) or die "Could not parse date from mysql";

my $year = $min_ts->year;

my $meta = "";
if ($year >= 2015) {
    $meta = ', `meta` text';
}

$dbh->do(
    <<EOT
CREATE TABLE IF NOT EXISTS `log_scores_archive_${year}` (
  `id` bigint(20) unsigned NOT NULL,
  `monitor_id` int(10) unsigned,
  `server_id` int(10) unsigned NOT NULL,
  `ts` datetime NOT NULL,
  `score` double NOT NULL DEFAULT '0',
  `step` double NOT NULL DEFAULT '0',
  `offset` double DEFAULT NULL
  $meta
) ENGINE=ARCHIVE DEFAULT CHARSET=utf8
EOT
);

my $archive_date = $min_ts->clone->add(hours => 16);
my $limit = DateTime->now->subtract(days => 32);

#my $limit = DateTime->new(year => 2013, month => 1, day => 1, time_zone => 'UTC');

my $next_year = DateTime->new(
    year      => $min_ts->year + 1,
    month     => 1,
    day       => 1,
    hour      => 0,
    minute    => 0,
    second    => 0,
    time_zone => 'UTC',
);


if ($archive_date > $limit) {
    $archive_date = $limit;
}
if ($archive_date >= $next_year) {
    $archive_date = $next_year;
}

if ($archive_date < $min_ts) {

    # no work todo
    exit;
}

print "Moving records older than $archive_date\n" if -t STDIN;

my $rv = $dbh->do(qq[insert into log_scores_archive_${year} select * from log_scores where ts < ?],
    {}, $archive_date);
die unless $rv;
print "Inserted $rv records\n" if -t STDIN;

$rv = $dbh->do(q[delete from log_scores where ts < ?], {}, $archive_date);
print "Removed $rv records\n" if -t STDIN;


