# -*- cperl -*-
eval 'exec $CBROOT/bin/perl $0 ${1+"$@"}'
  unless $running_under_some_shell;
use strict;
use warnings;

use URI;
use File::Temp qw(tempfile);

use Combust::Gearman::Worker;
use Combust::Config;

use NP::Model;
use NP::Util qw(run);

$ENV{PATH} = "$ENV{PATH}:/usr/local/phantomjs/bin";

$| = 1;

print "Starting, registering worker\n";

my $url = URI->new(Combust::Config->new->base_url('ntppool'));
$url->query_form(graph_only => 1);

my $worker = Combust::Gearman::Worker->new();
$worker->register_function(update_graphs => sub { update_graphs(@_) });

print "Worker registered, entering work loop\n";

$worker->work while 1;

sub update_graphs {
    my $job       = shift;
    my $server_id = $job->arg;
    printf "Processing %i\n", $server_id;
    NP::Model->db->ping;
    my $server = NP::Model->server->fetch(id => $server_id) or return 0;
    my ($xfh, $filename) = tempfile(SUFFIX => '.png');
    $url->path($server->url);
    NP::Util::run("phantomjs", "--disk-cache=yes", "$ENV{CBROOTLOCAL}/phantom/graph.js",
        $url->as_string, $filename);
    open my $fh, "<", $filename or die "Could not open graph: $!";
    my $data = do { local $/ = undef; <$fh> };
    printf "Done with %i %s %s\n", $server_id, $filename, $url->as_string;
    printf "Got %i bytes\n", length($data);
    unlink $filename;
    return $data;
}
