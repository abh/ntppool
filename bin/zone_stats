# -*- cperl -*-
eval 'exec $CBROOT/bin/perl $0 ${1+"$@"}'
  unless $running_under_some_shell;
use strict;
use warnings;
use Data::Dumper;
use Locale::Object;
use RRDs;
use DateTime;
use File::Path qw(mkpath);

my $base_path = "$ENV{CBROOTLOCAL}/rrd/zone";
my $target_path = "$ENV{CBROOTLOCAL}/rrd/zonetargets";

for my $path ($base_path, $target_path, "$base_path/graph") {
    mkpath $path unless -e $path;
}

my $time = time;
 
use NP::Model;

my %growth_targets =
  (
   2005 => 0.45,
   2006 => 0.50,
   2007 => 0.35,
   2008 => 0.32,
   2009 => 0.30,
   default => 0.25
  );

my $zones = NP::Model->zone->get_zones_iterator;
my $dbh   = NP::Model->dbh;

if (@ARGV and $ARGV[0] eq "populate_all") {
    populate_all();
    exit;
}

while (my $zone = $zones->next) {

    #next unless $zone->name eq 'europe';

    my $now = time;

    create_rrd($zone);
    create_target_rrd($zone);
    update_target_rrd($zone);

    my %data;

    for my $ip_version (qw(v4 v6)) {

        my $data = $data{$ip_version} = {};

        $data->{count_active}    = $zone->server_count($ip_version);
        $data->{count_all}       = $zone->server_count_all($ip_version);
        $data->{netspeed_active} = $zone->netspeed_active($ip_version) || 0;

        # printf "%-8s %s %3i %3i\n", $zone->name, $ip_version, $data->{count_active}, $data->{count_all};
        $dbh->do(q[replace into zone_server_counts (zone_id,ip_version,date,count_active,count_registered,netspeed_active)
               values (?,?,NOW(),?,?,?)],
                 undef,
                 $zone->id,
                 $ip_version,
                 $data->{count_active}, $data->{count_all}, $data->{netspeed_active}
                );

    }

    update_rrd($zone, $now, \%data);

    update_graph($zone, 'v4');
    update_graph($zone, 'v6');
}

sub populate_all {
    while (my $zone = $zones->next) {
        my $data = $dbh->selectall_arrayref(q[select unix_timestamp(date) as time, date, ip_version,
                                              count_active, count_registered, netspeed_active
                                              from zone_server_counts
                                              where zone_id=? order by date],
                                            {Columns=>{}}, $zone->id);
        create_rrd($zone);

        my $i = 0;

        my %days;

        for my $d (@$data) {
            $days{ $d->{date} }->{ $d->{ip_version} } = $d;
        }

        #use Data::Dump qw(pp);
        #pp( \%days);

        for my $day (sort keys %days) {

            print $zone->name, " $day\n";
            # $d->{date} ($d->{count_active}, $d->{count_registered}, $d->{netspeed_active})\n";

            my $time = $days{$day}->{v4}->{time} || $days{$day}->{v6}->{time};

            update_rrd($zone, $time, $days{$day});

        }

    }
}

sub update_rrd {
    my ($zone, $time, $data) = @_;

    #use Data::Dump qw(pp);
    #print "update rrd ", pp( $data ), "\n";

    my $path = rrd_path($zone);
    my @options = (
        '--template' => 'active_v4:registered_v4:netspeed_v4:active_v6:registered_v6:netspeed_v6',
        "$time:" . join(
            ":",
            map {
                my $v = $_;
                map { $data->{$v}->{$_} || 'U' } qw(count_active count_registered netspeed_active)
              } qw(v4 v6)
        )
    );
    RRDs::update "$path", @options;
    if (my $ERROR = RRDs::error) {
        warn "$0: unable to update $path: $ERROR\nOptions: ", join " ", @options;
    }
}


sub rrd_path {
    my $zone = shift;
    my $name = $zone->name;
    "$base_path/$name.rrd";
}

sub target_path {
    my $zone = shift;
    my $name = $zone->name;
    "$target_path/$name.rrd";
}

sub update_graph {
    my $zone = shift;
    my $ip_version = shift;

    my $fqdn = $zone->fqdn;
    my $title = "Servers in the $fqdn zone ($ip_version)";

    my $rrd = rrd_path($zone);
    my $trrd = target_path($zone);


    # if there's no data at all
    my $start = 'end-1m';

    # in other cases, start the graph when the first data started
    if (my $first_stats = $zone->first_stats) {

        my $date = $first_stats->date;
        $date = $date->subtract(weeks => 2);

        # except for ipv6; start those graphs no earlier than June 1, 2011
        if ($ip_version eq 'v6' and $date->year < 2011) {
            $date = DateTime->new(year => 2011, month => 6, day => 1);
        }

        $start = $date->epoch;

    }

    # print "Graph for $fqdn / $ip_version\n";
    # print "START: ", $start, "\n";

    my @options = (
                   #'--lazy',

                   '--zoom' => 1,
                   
                   '--end'    => 'now',
                   '--start'  => $start,
                   '--width'  => 420,
                   '--height' => 130,
                   '--title'  => $title,
                   '--lower-limit' => 0,
                   '--upper-limit' => 5,
                   '--alt-autoscale-max',
                   # '--no-gridfit',
                   '--slope-mode',

                   ## requires a newer rrdtool than what we have on the
                   ## production server
                   # '--dynamic-labels',

                   '--units-exponent' => 0,

                   '--tabwidth' => 100,

                   qq[DEF:active=$rrd:active_${ip_version}:AVERAGE],
                   q[VDEF:active_now=active,LAST],

                   qq[DEF:registered=$rrd:registered_${ip_version}:AVERAGE],
                   q[VDEF:registered_now=registered,LAST],

                   qq[DEF:target=$trrd:target_${ip_version}:AVERAGE],
                   q[VDEF:target_now=target,LAST],

                   q[CDEF:inactive=registered,active,-],
                   q[VDEF:inactive_now=inactive,LAST],

                   q[LINE2:registered#00CCCC:registered servers\g],
                   q[GPRINT:registered_now: (%1.0lf)],

                   q[LINE1:target#444444:growth target\g],
                   q[GPRINT:target_now:    (%1.0lf)],
                   q[COMMENT:\l],

                   q[LINE2:active#006600:active servers\g],
                   q[GPRINT:active_now:     (%1.0lf)],

                   q[LINE2:inactive#DD9000:inactive servers\g],
                   q[GPRINT:inactive_now: (%1.0lf)],

                   q[COMMENT:\l],

                  );

    my $path = $zone->graph_path($ip_version);
    RRDs::graph $path, @options;
    my $ERROR = RRDs::error;
    if ($ERROR) {
        warn "$0: unable to create '$path': $ERROR\n";
    }

}

sub create_rrd {
    my $zone = shift;
    my $path = rrd_path($zone);
    return if -e $path;

    my $START = 1123602000; # a few hours before the oldest data in prod
    
    my @graph = (
                 "--start", $START, "--step", 21600, # 6 hours interval
                 "DS:active_v4:GAUGE:180000:0:30000",  # heartbeat of ~2 days, min value = 0, max = 20000
                 "DS:registered_v4:GAUGE:180000:0:30000",
                 "DS:netspeed_v4:GAUGE:180000:0:400000000",

                 "DS:active_v6:GAUGE:180000:0:20000",
                 "DS:registered_v6:GAUGE:180000:0:20000",
                 "DS:netspeed_v6:GAUGE:180000:0:400000000",

                 "RRA:AVERAGE:0.5:1:1024",   # 6 hours, 170 days
                 "RRA:AVERAGE:0.5:4:1024",   # 1 day, ~3 years
                 "RRA:AVERAGE:0.5:12:1024",  # 3 days, ~9 years
                 "RRA:AVERAGE:0.5:42:1024",  # 1 week, ~19 years.

                 "RRA:MIN:0.5:4:1024",       # 1 day, ~3 years
                 "RRA:MIN:0.5:42:1024",      # 1 week, ~19 years.

                 "RRA:MAX:0.5:4:1024",       # 1 day, ~3 years
                 "RRA:MAX:0.5:42:1024",      # 1 week, ~19 years.

                 "RRA:LAST:0.5:1:1",         # just save the last exact data
                );
                 

    RRDs::create "$path", @graph;
    my $ERROR = RRDs::error;
    if ($ERROR) {
        die "$0: unable to create '$path': $ERROR\n";
    }
}

sub update_target_rrd {
    my $zone = shift;
    my $path = target_path($zone);
    my $now  = DateTime->from_epoch( epoch => time );
    my $last = DateTime->from_epoch( epoch => (RRDs::last target_path($zone) || 0));

    #print "updating targets for ", $zone->name, "\n";

    use Data::Dump qw(pp);

    if ($last < $now) { 

        my %data;

        for my $ip_version (qw(v4 v6)) {

            my $opening_stats = $zone->first_stats("", $ip_version);
            my $opening_stats_date = $opening_stats ? $opening_stats->date : DateTime->now;

            my $start_year = ($opening_stats_date->year < $last->year ? $last->year : $opening_stats_date->year);

            for my $year ($start_year .. $now->year) {

                my $days_in_year = DateTime->new(year => $year)->is_leap_year ? 366 : 365;

                my $first_stats_year = $zone->first_stats($year, $ip_version);
                my $start_active  = $first_stats_year ? $first_stats_year->count_active : 0;
                my $first_day     = $first_stats_year ? $first_stats_year->date->day_of_year : 1;

                #print "Year ", $year, " starts with ", $start_active, "\n";

                my $year_growth_goal = $start_active * ($growth_targets{$year} || $growth_targets{default});
                $year_growth_goal    = 6 - $start_active if $year_growth_goal < 3;
                my $growth_per_day   = $year_growth_goal / $days_in_year;

                my $day = DateTime->from_epoch(epoch => $first_stats_year
					       ? $first_stats_year->date->epoch
					       : time
					      );

                my $goal = $start_active;
                #print "starting goal: $goal\n";

                my $end_of_year = DateTime->new(year => $year, month => 12, day => 31);

                while ($day <= $end_of_year) { 
                    my $time = $day->epoch;
                    $data{$time}->{$ip_version} = $goal;

                    my $step = 1;
                    $goal += ($growth_per_day * $step);
                    $day->add( days => $step );

                }
                #print "goal at end $goal\n";

            }
        }

        #use Data::Dump qw(pp);
        #print pp(\%data);

        my $i = 0;
        for my $time (sort keys %data) {

            my $goal_v4 = $data{$time}->{v4} || 'U';
            my $goal_v6 = $data{$time}->{v6} || 'U';

            # print "adding for $time: $goal_v4 / $goal_v6\n";

            my $path = target_path($zone);
            my @options = ('--template' => 'target_v4:target_v6',
                           "$time:${goal_v4}:${goal_v6}",
                          );
            #print join " ", @options, "\n";
            RRDs::update "$path", @options;
            if (my $ERROR = RRDs::error) {
                warn "$0: unable to update $path: $ERROR\nOptions: ", join " ", @options;
            }

        }
    }
}

sub create_target_rrd {
    my $zone = shift;
    my $path = target_path($zone);
    return if -e $path;

    my $START = 1104364800;  # dec 30 2004
    
    my @graph = (
                 "--start", $START, "--step", 86400, # 24 hours interval
                 "DS:target_v4:GAUGE:2592000:0:20000",  # heartbeat of ~30 days, min value = 0, max = 20000
                 "DS:target_v6:GAUGE:2592000:0:20000",
                 "RRA:AVERAGE:0.5:1:1024", # 1 day, ~3 years
                 "RRA:AVERAGE:0.5:3:1024", # 3 days, ~9 years
                 "RRA:AVERAGE:0.5:7:512",  # 1 week, ~10 years
                 "RRA:AVERAGE:0.5:30:512", # 1 month, ~40 years
                );
                 

    RRDs::create "$path", @graph;
    my $ERROR = RRDs::error;
    if ($ERROR) {
        die "$0: unable to create '$path': $ERROR\n";
    }
}
